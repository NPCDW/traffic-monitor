name: Build

on:
  push:
    tags: "*"

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            npcdw/traffic-monitor:${{ github.ref_name }}
            npcdw/traffic-monitor:latest
  
  binaries:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            archive-name: traffic-monitor-${{ github.ref_name }}-linux-amd64.tar.gz
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            archive-name: traffic-monitor-${{ github.ref_name }}-macos-amd64.tar.gz
    steps:
    - uses: actions/checkout@v4
      with:
        repository: 'NPCDW/traffic-monitor-web'
    - name: Install Nodejs
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'
    - name: Build web
      shell: bash
      run: npm install -g pnpm && pnpm install && pnpm run build && mv dist ../ui
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
    - name: Build
      run: cargo build --verbose --release --target ${{ matrix.target }}
      env:
        RUST_BACKTRACE: 1
    - name: Strip binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/traffic-monitor"
    - name: Build archive
      shell: bash
      run: |
        mkdir archive
        cp -r LICENSE README.md "../ui" archive/
        if [ "${{ matrix.build }}" = "windows" ]; then
          cp "target/${{ matrix.target }}/release/traffic-monitor.exe" archive/
          7z a "${{ matrix.archive-name }}" archive
        else
          cp "target/${{ matrix.target }}/release/traffic-monitor" archive/
          tar -czf "${{ matrix.archive-name }}" archive
        fi
    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ matrix.archive-name }}

